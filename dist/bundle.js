/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/config/db.ts":
/*!**************************!*\
  !*** ./src/config/db.ts ***!
  \**************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst pg_1 = __webpack_require__(/*! pg */ \"pg\");\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\n// Загрузка переменных окружения\ndotenv_1.default.config();\nconst pool = new pg_1.Pool({\n    user: process.env.DB_USER,\n    host: process.env.DB_HOST,\n    database: process.env.DB_NAME,\n    password: process.env.DB_PASSWORD,\n    port: Number(process.env.DB_PORT),\n});\nconsole.log({\n    user: process.env.DB_USER,\n    host: process.env.DB_HOST,\n    database: process.env.DB_NAME,\n    password: process.env.DB_PASSWORD,\n    port: Number(process.env.DB_PORT),\n});\nexports[\"default\"] = pool;\n\n\n//# sourceURL=webpack://server/./src/config/db.ts?");

/***/ }),

/***/ "./src/config/swagger.ts":
/*!*******************************!*\
  !*** ./src/config/swagger.ts ***!
  \*******************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.swaggerDocs = void 0;\nconst swagger_jsdoc_1 = __importDefault(__webpack_require__(/*! swagger-jsdoc */ \"swagger-jsdoc\"));\nconst swagger_ui_express_1 = __importDefault(__webpack_require__(/*! swagger-ui-express */ \"swagger-ui-express\"));\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\ndotenv_1.default.config();\nconst PORT = process.env.PORT || 3222;\nconst DB_HOST = process.env.DB_HOST || \"localhost\";\nconst options = {\n    definition: {\n        openapi: \"3.0.0\",\n        info: {\n            title: \"Документация для бэка\",\n            version: \"1.0.0\",\n            description: \"Доки для API диплома. Тема: Веб-приложения для контроля финансов\\nСделал: Гусев А. М 3094\",\n        },\n        components: {\n            schemas: {\n                User: {\n                    type: \"object\",\n                    properties: {\n                        id: { type: \"integer\" },\n                        firstName: { type: \"string\" },\n                        lastName: { type: \"string\" },\n                        email: { type: \"string\" },\n                        password: { type: \"string\" },\n                        dateOfBirth: { type: \"string\", format: \"date\" },\n                        accountType: { type: \"integer\" },\n                    },\n                },\n                CreateUser: {\n                    type: \"object\",\n                    required: [\n                        \"firstName\",\n                        \"lastName\",\n                        \"email\",\n                        \"password\",\n                        \"dateOfBirth\",\n                        \"accountType\",\n                    ],\n                    properties: {\n                        firstName: { type: \"string\", description: \"Имя пользователя\" },\n                        lastName: { type: \"string\", description: \"Фамилия пользователя\" },\n                        email: {\n                            type: \"string\",\n                            description: \"Электронная почта пользователя\",\n                        },\n                        password: { type: \"string\", description: \"Пароль пользователя\" },\n                        dateOfBirth: {\n                            type: \"string\",\n                            format: \"date\",\n                            description: \"Дата рождения пользователя\",\n                        },\n                        accountType: {\n                            type: \"integer\",\n                            description: \"Тип аккаунта пользователя\",\n                        },\n                    },\n                },\n                UpdateUser: {\n                    type: \"object\",\n                    properties: {\n                        firstName: {\n                            type: \"string\",\n                            description: \"Обновлённое имя пользователя\",\n                        },\n                        lastName: {\n                            type: \"string\",\n                            description: \"Обновлённая фамилия пользователя\",\n                        },\n                        email: {\n                            type: \"string\",\n                            description: \"Обновлённая электронная почта пользователя\",\n                        },\n                        password: {\n                            type: \"string\",\n                            description: \"Обновлённый пароль пользователя\",\n                        },\n                        dateOfBirth: {\n                            type: \"string\",\n                            format: \"date\",\n                            description: \"Обновлённая дата рождения пользователя\",\n                        },\n                        accountType: {\n                            type: \"integer\",\n                            description: \"Обновлённый тип аккаунта пользователя\",\n                        },\n                    },\n                },\n                Note: {\n                    type: \"object\",\n                    properties: {\n                        id: { type: \"integer\", description: \"Идентификатор заметки\" },\n                        userId: {\n                            type: \"integer\",\n                            description: \"Идентификатор пользователя\",\n                        },\n                        title: { type: \"string\", description: \"Заголовок заметки\" },\n                        description: {\n                            type: \"string\",\n                            description: \"Описание заметки (опционально)\",\n                        },\n                        creationDate: {\n                            type: \"string\",\n                            format: \"date-time\",\n                            description: \"Дата создания заметки\",\n                        },\n                        reminderDate: {\n                            type: \"string\",\n                            format: \"date-time\",\n                            description: \"Дата напоминания (опционально)\",\n                        },\n                    },\n                },\n                CreateNote: {\n                    type: \"object\",\n                    required: [\"userId\", \"title\"],\n                    properties: {\n                        userId: {\n                            type: \"integer\",\n                            description: \"Идентификатор пользователя\",\n                        },\n                        title: { type: \"string\", description: \"Заголовок заметки\" },\n                        description: {\n                            type: \"string\",\n                            description: \"Описание заметки (опционально)\",\n                        },\n                        reminderDate: {\n                            type: \"string\",\n                            format: \"date-time\",\n                            description: \"Дата напоминания (опционально)\",\n                        },\n                    },\n                },\n                UpdateNote: {\n                    type: \"object\",\n                    properties: {\n                        title: {\n                            type: \"string\",\n                            description: \"Обновлённый заголовок заметки\",\n                        },\n                        description: {\n                            type: \"string\",\n                            description: \"Обновлённое описание заметки (опционально)\",\n                        },\n                        reminderDate: {\n                            type: \"string\",\n                            format: \"date-time\",\n                            description: \"Обновлённая дата напоминания (опционально)\",\n                        },\n                    },\n                },\n                Transaction: {\n                    type: \"object\",\n                    properties: {\n                        id: { type: \"integer\", description: \"Идентификатор транзакции\" },\n                        accountId: {\n                            type: \"integer\",\n                            description: \"Идентификатор аккаунта\",\n                        },\n                        userId: {\n                            type: \"integer\",\n                            description: \"Идентификатор пользователя\",\n                        },\n                        categoryId: {\n                            type: \"integer\",\n                            description: \"Идентификатор категории\",\n                        },\n                        isIncome: {\n                            type: \"boolean\",\n                            description: \"Признак доходной транзакции\",\n                        },\n                        amount: {\n                            type: \"number\",\n                            format: \"float\",\n                            description: \"Сумма транзакции\",\n                        },\n                        transactionDate: {\n                            type: \"string\",\n                            format: \"date-time\",\n                            description: \"Дата транзакции\",\n                        },\n                    },\n                },\n                CreateTransaction: {\n                    type: \"object\",\n                    required: [\"accountId\", \"userId\", \"categoryId\", \"isIncome\", \"amount\"],\n                    properties: {\n                        accountId: {\n                            type: \"integer\",\n                            description: \"Идентификатор аккаунта\",\n                        },\n                        userId: {\n                            type: \"integer\",\n                            description: \"Идентификатор пользователя\",\n                        },\n                        categoryId: {\n                            type: \"integer\",\n                            description: \"Идентификатор категории\",\n                        },\n                        isIncome: {\n                            type: \"boolean\",\n                            description: \"Признак доходной транзакции\",\n                        },\n                        amount: {\n                            type: \"number\",\n                            format: \"float\",\n                            description: \"Сумма транзакции\",\n                        },\n                    },\n                },\n                UpdateTransaction: {\n                    type: \"object\",\n                    properties: {\n                        accountId: {\n                            type: \"integer\",\n                            description: \"Идентификатор аккаунта\",\n                        },\n                        categoryId: {\n                            type: \"integer\",\n                            description: \"Идентификатор категории\",\n                        },\n                        isIncome: {\n                            type: \"boolean\",\n                            description: \"Признак доходной транзакции\",\n                        },\n                        amount: {\n                            type: \"number\",\n                            format: \"float\",\n                            description: \"Сумма транзакции\",\n                        },\n                    },\n                },\n                Account: {\n                    type: \"object\",\n                    properties: {\n                        id: { type: \"integer\" },\n                        ownerId: { type: \"integer\" },\n                        accountName: { type: \"string\" },\n                        totalBalance: { type: \"number\", format: \"float\" },\n                        currency: { type: \"string\" },\n                    },\n                },\n                Category: {\n                    type: \"object\",\n                    properties: {\n                        id: { type: \"integer\", description: \"Идентификатор категории\" },\n                        userId: {\n                            type: \"integer\",\n                            description: \"Идентификатор пользователя\",\n                        },\n                        categoryName: { type: \"string\", description: \"Название категории\" },\n                        image: {\n                            type: \"string\",\n                            format: \"uri\",\n                            description: \"URL изображения категории\",\n                        },\n                    },\n                },\n                CreateCategory: {\n                    type: \"object\",\n                    required: [\"userId\", \"categoryName\"],\n                    properties: {\n                        userId: {\n                            type: \"integer\",\n                            description: \"Идентификатор пользователя\",\n                        },\n                        categoryName: { type: \"string\", description: \"Название категории\" },\n                        image: {\n                            type: \"string\",\n                            format: \"uri\",\n                            description: \"URL изображения категории (опционально)\",\n                        },\n                    },\n                },\n                UpdateCategory: {\n                    type: \"object\",\n                    properties: {\n                        categoryName: {\n                            type: \"string\",\n                            description: \"Обновлённое название категории\",\n                        },\n                        image: {\n                            type: \"string\",\n                            format: \"uri\",\n                            description: \"Обновлённое URL изображения категории\",\n                        },\n                    },\n                },\n            },\n        },\n        servers: [\n            {\n                url: `http://localhost:${PORT}`,\n            },\n        ],\n    },\n    apis: [\"./src/routers/*.ts\"],\n};\nconst swaggerSpec = (0, swagger_jsdoc_1.default)(options);\nconst swaggerDocs = (app, port) => {\n    // Указываем типы\n    app.use(\"/api-docs\", swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(swaggerSpec));\n    console.log(`Swagger docs available at http://localhost:${port}/api-docs`);\n};\nexports.swaggerDocs = swaggerDocs;\n\n\n//# sourceURL=webpack://server/./src/config/swagger.ts?");

/***/ }),

/***/ "./src/controllers/AccountController.ts":
/*!**********************************************!*\
  !*** ./src/controllers/AccountController.ts ***!
  \**********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountController = void 0;\nconst AccountService_1 = __webpack_require__(/*! ../services/AccountService */ \"./src/services/AccountService.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./src/utils/index.ts\");\nclass AccountController {\n    static createAccount(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const newAccount = yield AccountService_1.AccountService.createAccount(req.body);\n                res.status(201).json(newAccount);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static getAccountById(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const account = yield AccountService_1.AccountService.getAccountById(id);\n                res.json(account);\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static updateAccount(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const { accountName, totalBalance, currency } = req.body;\n                const updatedAccount = yield AccountService_1.AccountService.updateAccount(id, accountName, totalBalance, currency);\n                res.json(updatedAccount);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static deleteAccount(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                yield AccountService_1.AccountService.deleteAccount(id);\n                res.status(204).send();\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static getUserAccounts(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const userId = Number(req.params.userId);\n                const accounts = yield AccountService_1.AccountService.getUserAccounts(userId);\n                res.json(accounts);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static getAccountBalance(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const accountId = Number(req.params.accountId);\n                const balance = yield AccountService_1.AccountService.getAccountBalance(accountId);\n                res.json({ balance });\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n}\nexports.AccountController = AccountController;\n\n\n//# sourceURL=webpack://server/./src/controllers/AccountController.ts?");

/***/ }),

/***/ "./src/controllers/CategoryController.ts":
/*!***********************************************!*\
  !*** ./src/controllers/CategoryController.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CategoryController = void 0;\nconst CategoryService_1 = __webpack_require__(/*! ../services/CategoryService */ \"./src/services/CategoryService.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./src/utils/index.ts\");\nclass CategoryController {\n    static createCategory(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const newCategory = yield CategoryService_1.CategoryService.createCategory(req.body);\n                res.status(201).json(newCategory);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static getCategoryById(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const category = yield CategoryService_1.CategoryService.getCategoryById(id);\n                res.json(category);\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static updateCategory(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const { categoryName, image } = req.body;\n                const updatedCategory = yield CategoryService_1.CategoryService.updateCategory(id, categoryName, image);\n                res.json(updatedCategory);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static deleteCategory(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                yield CategoryService_1.CategoryService.deleteCategory(id);\n                res.status(204).send();\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static getUserCategories(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const userId = Number(req.params.userId);\n                const categories = yield CategoryService_1.CategoryService.getUserCategories(userId);\n                res.json(categories);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n}\nexports.CategoryController = CategoryController;\n\n\n//# sourceURL=webpack://server/./src/controllers/CategoryController.ts?");

/***/ }),

/***/ "./src/controllers/NoteController.ts":
/*!*******************************************!*\
  !*** ./src/controllers/NoteController.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoteController = void 0;\nconst NoteService_1 = __webpack_require__(/*! ../services/NoteService */ \"./src/services/NoteService.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./src/utils/index.ts\");\nclass NoteController {\n    // Создать заметку\n    static createNote(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const { title, description, reminderDate, userId } = req.body;\n                // Вызов сервиса для создания заметки\n                const newNote = yield NoteService_1.NoteService.createNote({\n                    title,\n                    description,\n                    reminderDate,\n                    userId,\n                });\n                res.status(201).json(newNote);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Получить заметку по ID\n    static getNoteById(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const note = yield NoteService_1.NoteService.getNoteById(id);\n                res.json(note);\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Обновить заметку\n    static updateNote(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const { title, description, reminderDate, userId } = req.body;\n                const updatedNote = yield NoteService_1.NoteService.updateNote(id, title, description);\n                res.json(updatedNote);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Удалить заметку\n    static deleteNote(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                yield NoteService_1.NoteService.deleteNote(id);\n                res.status(204).send();\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Получить все заметки пользователя\n    static getUserNotes(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const userId = Number(req.params.userId);\n                const notes = yield NoteService_1.NoteService.getUserNotes(userId);\n                res.json(notes);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n}\nexports.NoteController = NoteController;\n\n\n//# sourceURL=webpack://server/./src/controllers/NoteController.ts?");

/***/ }),

/***/ "./src/controllers/TransactionController.ts":
/*!**************************************************!*\
  !*** ./src/controllers/TransactionController.ts ***!
  \**************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionController = void 0;\nconst TransactionService_1 = __webpack_require__(/*! ../services/TransactionService */ \"./src/services/TransactionService.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./src/utils/index.ts\");\nclass TransactionController {\n    // Создать транзакцию\n    static createTransaction(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const newTransaction = yield TransactionService_1.TransactionService.createTransaction(req.body);\n                res.status(201).json(newTransaction);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Получить транзакцию по ID\n    static getTransactionById(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const transaction = yield TransactionService_1.TransactionService.getTransactionById(id);\n                res.json(transaction);\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Обновить транзакцию\n    static updateTransaction(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const { accountId, categoryId, isIncome, amount } = req.body;\n                const updatedTransaction = yield TransactionService_1.TransactionService.updateTransaction(id, accountId, categoryId, isIncome, amount);\n                res.json(updatedTransaction);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Удалить транзакцию\n    static deleteTransaction(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                yield TransactionService_1.TransactionService.deleteTransaction(id);\n                res.status(204).send();\n            }\n            catch (error) {\n                res.status(404).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Получить транзакции аккаунта\n    static getAccountTransactions(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const accountId = Number(req.params.accountId);\n                const transactions = yield TransactionService_1.TransactionService.getAccountTransactions(accountId);\n                res.json(transactions);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    // Получить транзакции по категории\n    static getTransactionsByCategory(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const categoryId = Number(req.params.categoryId);\n                const transactions = yield TransactionService_1.TransactionService.getTransactionsByCategory(categoryId);\n                res.json(transactions);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n}\nexports.TransactionController = TransactionController;\n\n\n//# sourceURL=webpack://server/./src/controllers/TransactionController.ts?");

/***/ }),

/***/ "./src/controllers/UserController.ts":
/*!*******************************************!*\
  !*** ./src/controllers/UserController.ts ***!
  \*******************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserController = void 0;\nconst UserService_1 = __webpack_require__(/*! ../services/UserService */ \"./src/services/UserService.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils */ \"./src/utils/index.ts\");\nclass UserController {\n    static getAllUsers(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const users = yield UserService_1.UserService.getAllUsers();\n                res.json(users);\n            }\n            catch (error) {\n                res.status(500).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static createUser(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const newUser = yield UserService_1.UserService.createUser(req.body);\n                res.status(201).json(newUser);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static getUserById(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const user = yield UserService_1.UserService.getUserById(id);\n                if (!user) {\n                    return res.status(404).json({ message: \"User not found\" });\n                }\n                res.json(user);\n            }\n            catch (error) {\n                res.status(500).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static updateUser(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                const updatedUser = yield UserService_1.UserService.updateUser(id, req.body);\n                res.json(updatedUser);\n            }\n            catch (error) {\n                res.status(400).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n    static deleteUser(req, res) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const id = Number(req.params.id);\n                yield UserService_1.UserService.deleteUser(id);\n                res.status(204).send();\n            }\n            catch (error) {\n                res.status(500).json({ message: (0, utils_1.getErrorMessage)(error) });\n            }\n        });\n    }\n}\nexports.UserController = UserController;\n\n\n//# sourceURL=webpack://server/./src/controllers/UserController.ts?");

/***/ }),

/***/ "./src/middleware/index.ts":
/*!*********************************!*\
  !*** ./src/middleware/index.ts ***!
  \*********************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.asyncHandler = void 0;\nconst asyncHandler = (fn) => (req, res, next) => {\n    Promise.resolve(fn(req, res, next)).catch(next);\n};\nexports.asyncHandler = asyncHandler;\n\n\n//# sourceURL=webpack://server/./src/middleware/index.ts?");

/***/ }),

/***/ "./src/repositories/AccountRepository.ts":
/*!***********************************************!*\
  !*** ./src/repositories/AccountRepository.ts ***!
  \***********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountRepository = void 0;\nconst db_1 = __importDefault(__webpack_require__(/*! ../config/db */ \"./src/config/db.ts\"));\nclass AccountRepository {\n    // Создание нового аккаунта\n    static createAccount(account) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { ownerId, accountName, totalBalance, currency } = account;\n            const result = yield db_1.default.query(\"SELECT * FROM create_account($1, $2, $3, $4)\", [ownerId, accountName, totalBalance, currency]);\n            return result.rows[0];\n        });\n    }\n    // Получение аккаунта по ID\n    static getAccountById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_account_by_id($1)\", [\n                id,\n            ]);\n            return result.rows[0] || null;\n        });\n    }\n    // Обновление аккаунта\n    static updateAccount(id, accountName, totalBalance, currency) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM update_account($1, $2, $3, $4)\", [id, accountName, totalBalance, currency]);\n            return result.rows[0] || null;\n        });\n    }\n    // Удаление аккаунта\n    static deleteAccount(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield db_1.default.query(\"SELECT delete_account($1)\", [id]);\n        });\n    }\n    // Получение всех аккаунтов пользователя\n    static getUserAccounts(userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_user_accounts($1)\", [\n                userId,\n            ]);\n            return result.rows;\n        });\n    }\n    // Получение баланса аккаунта\n    static getAccountBalance(accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            var _a;\n            const result = yield db_1.default.query(\"SELECT get_account_balance($1)\", [\n                accountId,\n            ]);\n            return ((_a = result.rows[0]) === null || _a === void 0 ? void 0 : _a.get_account_balance) || 0;\n        });\n    }\n}\nexports.AccountRepository = AccountRepository;\n\n\n//# sourceURL=webpack://server/./src/repositories/AccountRepository.ts?");

/***/ }),

/***/ "./src/repositories/CategoryRepository.ts":
/*!************************************************!*\
  !*** ./src/repositories/CategoryRepository.ts ***!
  \************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CategoryRepository = void 0;\nconst db_1 = __importDefault(__webpack_require__(/*! ../config/db */ \"./src/config/db.ts\"));\nclass CategoryRepository {\n    static createCategory(category) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { image, categoryName, userId } = category;\n            const result = yield db_1.default.query(\"SELECT * FROM create_category($1, $2, $3)\", [image, categoryName, userId]);\n            return result.rows[0];\n        });\n    }\n    static getCategoryById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_category_by_id($1)\", [\n                id,\n            ]);\n            return result.rows[0] || null;\n        });\n    }\n    static updateCategory(id, categoryName, image) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM update_category($1, $2, $3)\", [id, categoryName, image]);\n            return result.rows[0] || null;\n        });\n    }\n    static deleteCategory(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield db_1.default.query(\"SELECT delete_category($1)\", [id]);\n        });\n    }\n    static getUserCategories(userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_user_categories($1)\", [\n                userId,\n            ]);\n            return result.rows;\n        });\n    }\n}\nexports.CategoryRepository = CategoryRepository;\n\n\n//# sourceURL=webpack://server/./src/repositories/CategoryRepository.ts?");

/***/ }),

/***/ "./src/repositories/NoteRepository.ts":
/*!********************************************!*\
  !*** ./src/repositories/NoteRepository.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoteRepository = void 0;\nconst db_1 = __importDefault(__webpack_require__(/*! ../config/db */ \"./src/config/db.ts\"));\nclass NoteRepository {\n    static createNote(note) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { title, description, reminderDate, userId } = note;\n            const result = yield db_1.default.query(\"SELECT * FROM create_note($1, $2, $3, $4)\", [userId, title, description, reminderDate]);\n            return result.rows[0];\n        });\n    }\n    static getNoteById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_note_by_id($1)\", [id]);\n            return result.rows[0] || null;\n        });\n    }\n    static updateNote(id, title, description) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM update_note($1, $2, $3)\", [\n                id,\n                title,\n                description,\n            ]);\n            return result.rows[0] || null;\n        });\n    }\n    static deleteNote(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield db_1.default.query(\"SELECT delete_note($1)\", [id]);\n        });\n    }\n    static getUserNotes(userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_user_notes($1)\", [\n                userId,\n            ]);\n            return result.rows;\n        });\n    }\n}\nexports.NoteRepository = NoteRepository;\n\n\n//# sourceURL=webpack://server/./src/repositories/NoteRepository.ts?");

/***/ }),

/***/ "./src/repositories/TransactionRepository.ts":
/*!***************************************************!*\
  !*** ./src/repositories/TransactionRepository.ts ***!
  \***************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionRepository = void 0;\nconst db_1 = __importDefault(__webpack_require__(/*! ../config/db */ \"./src/config/db.ts\"));\nclass TransactionRepository {\n    // Создать транзакцию\n    static createTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId, userId, categoryId, isIncome, amount } = transaction;\n            const result = yield db_1.default.query(\"SELECT * FROM create_transaction($1, $2, $3, $4, $5)\", [accountId, userId, categoryId, isIncome, amount]);\n            return result.rows[0];\n        });\n    }\n    // Получить транзакцию по ID\n    static getTransactionById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_transaction_by_id($1)\", [\n                id,\n            ]);\n            return result.rows[0] || null;\n        });\n    }\n    // Обновить транзакцию\n    static updateTransaction(id, accountId, categoryId, isIncome, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM update_transaction($1, $2, $3, $4, $5)\", [id, accountId, categoryId, isIncome, amount]);\n            return result.rows[0] || null;\n        });\n    }\n    // Удалить транзакцию\n    static deleteTransaction(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield db_1.default.query(\"SELECT delete_transaction($1)\", [id]);\n        });\n    }\n    // Получить транзакции аккаунта\n    static getAccountTransactions(accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_account_transactions($1)\", [accountId]);\n            return result.rows;\n        });\n    }\n    // Получить транзакции по категории\n    static getTransactionsByCategory(categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_transactions_by_category($1)\", [categoryId]);\n            return result.rows;\n        });\n    }\n}\nexports.TransactionRepository = TransactionRepository;\n\n\n//# sourceURL=webpack://server/./src/repositories/TransactionRepository.ts?");

/***/ }),

/***/ "./src/repositories/UserRepository.ts":
/*!********************************************!*\
  !*** ./src/repositories/UserRepository.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserRepository = void 0;\nconst db_1 = __importDefault(__webpack_require__(/*! ../config/db */ \"./src/config/db.ts\"));\nclass UserRepository {\n    static getAll() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(`SELECT * FROM \"User\"`);\n            return result.rows;\n        });\n    }\n    static create(user) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { firstName, lastName, middleName, email, password, dateOfBirth, accountType, } = user;\n            const result = yield db_1.default.query(\"SELECT * FROM create_user($1, $2, $3, $4, $5, $6, $7)\", [\n                firstName,\n                lastName,\n                middleName,\n                email,\n                password,\n                dateOfBirth,\n                accountType,\n            ]);\n            return result.rows[0];\n        });\n    }\n    static getById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM get_user_info($1)\", [id]);\n            return result.rows[0] || null;\n        });\n    }\n    static update(id, user) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { firstName, lastName, middleName, email, password, accountType } = user;\n            const result = yield db_1.default.query(\"SELECT * FROM update_user($1, $2, $3, $4, $5, $6, $7)\", [id, firstName, lastName, middleName, email, password, accountType]);\n            return result.rows[0] || null;\n        });\n    }\n    static delete(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield db_1.default.query(\"SELECT delete_user($1)\", [id]);\n        });\n    }\n    static authenticate(email, password) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM authenticate_user($1, $2)\", [\n                email,\n                password,\n            ]);\n            return result.rows[0] || null;\n        });\n    }\n    static findByEmail(email) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM find_user_by_email($1)\", [\n                email,\n            ]);\n            return result.rows[0] || null;\n        });\n    }\n    static findByAccountType(accountType) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM find_users_by_account_type($1)\", [accountType]);\n            return result.rows;\n        });\n    }\n    static registerUser(user) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { firstName, lastName, middleName, email, password, dateOfBirth, accountType, } = user;\n            const result = yield db_1.default.query(\"SELECT * FROM register_user($1, $2, $3, $4, $5, $6, $7)\", [\n                firstName,\n                lastName,\n                middleName,\n                email,\n                password,\n                dateOfBirth,\n                accountType,\n            ]);\n            return result.rows[0];\n        });\n    }\n    static changePassword(id, newPassword) {\n        return __awaiter(this, void 0, void 0, function* () {\n            yield db_1.default.query(\"SELECT change_password($1, $2)\", [id, newPassword]);\n        });\n    }\n    static findRecentUsers(limit) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const result = yield db_1.default.query(\"SELECT * FROM find_recent_users($1)\", [\n                limit,\n            ]);\n            return result.rows;\n        });\n    }\n}\nexports.UserRepository = UserRepository;\n\n\n//# sourceURL=webpack://server/./src/repositories/UserRepository.ts?");

/***/ }),

/***/ "./src/routers/accountRouters.ts":
/*!***************************************!*\
  !*** ./src/routers/accountRouters.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst express_1 = __webpack_require__(/*! express */ \"express\");\nconst AccountController_1 = __webpack_require__(/*! ../controllers/AccountController */ \"./src/controllers/AccountController.ts\");\nconst router = (0, express_1.Router)();\n/**\n * @swagger\n * /accounts:\n *   post:\n *     summary: Создание нового аккаунта\n *     description: Создаёт новый аккаунт.\n *     tags: [Аккаунты]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/Account'\n *     responses:\n *       201:\n *         description: Account created successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: Account created successfully.\n *       400:\n *         description: Bad request.\n */\nrouter.post(\"/\", (req, res) => AccountController_1.AccountController.createAccount(req, res));\n/**\n * @swagger\n * /accounts/{id}:\n *   put:\n *     summary: Обновление данных аккаунта\n *     description: Обновляет информацию об аккаунте.\n *     tags: [Аккаунты]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор аккаунта\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UpdateAccount'\n *     responses:\n *       200:\n *         description: Account updated successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 message:\n *                   type: string\n *                   example: Account updated successfully.\n *       400:\n *         description: Bad request.\n *       404:\n *         description: Account not found.\n */\nrouter.put(\"/:id\", (req, res) => AccountController_1.AccountController.updateAccount(req, res));\n/**\n * @swagger\n * /accounts/{id}:\n *   delete:\n *     summary: Удаление аккаунта\n *     description: Удаляет аккаунт.\n *     tags: [Аккаунты]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор аккаунта\n *     responses:\n *       204:\n *         description: Account deleted successfully.\n *       404:\n *         description: Account not found.\n */\nrouter.delete(\"/:id\", (req, res) => AccountController_1.AccountController.deleteAccount(req, res));\n/**\n * @swagger\n * /accounts/user/{userId}:\n *   get:\n *     summary: Получение аккаунтов пользователя\n *     description: Возвращает список всех аккаунтов пользователя.\n *     tags: [Аккаунты]\n *     parameters:\n *       - in: path\n *         name: userId\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор пользователя\n *     responses:\n *       200:\n *         description: List of user accounts retrieved successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Account'\n *       404:\n *         description: User or accounts not found.\n */\nrouter.get(\"/user/:userId\", (req, res) => AccountController_1.AccountController.getUserAccounts(req, res));\n/**\n * @swagger\n * /accounts/{accountId}/balance:\n *   get:\n *     summary: Получение баланса аккаунта\n *     description: Возвращает текущий баланс аккаунта.\n *     tags: [Аккаунты]\n *     parameters:\n *       - in: path\n *         name: accountId\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор аккаунта\n *     responses:\n *       200:\n *         description: Account balance retrieved successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 balance:\n *                   type: number\n *                   format: float\n *                   example: 1000.50\n *       404:\n *         description: Account not found.\n */\nrouter.get(\"/:accountId/balance\", (req, res) => AccountController_1.AccountController.getAccountBalance(req, res));\nexports[\"default\"] = router;\n\n\n//# sourceURL=webpack://server/./src/routers/accountRouters.ts?");

/***/ }),

/***/ "./src/routers/categoryRouters.ts":
/*!****************************************!*\
  !*** ./src/routers/categoryRouters.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst express_1 = __webpack_require__(/*! express */ \"express\");\nconst CategoryController_1 = __webpack_require__(/*! ../controllers/CategoryController */ \"./src/controllers/CategoryController.ts\");\nconst router = (0, express_1.Router)();\n/**\n * @swagger\n * /categories:\n *   post:\n *     summary: Создание новой категории\n *     description: Создаёт новую категорию для пользователя.\n *     tags: [Категории]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/CreateCategory'\n *     responses:\n *       201:\n *         description: Category created successfully.\n *       400:\n *         description: Bad request.\n */\nrouter.post(\"/\", (req, res) => CategoryController_1.CategoryController.createCategory(req, res));\n/**\n * @swagger\n * /categories/{id}:\n *   get:\n *     summary: Получение категории по ID\n *     description: Возвращает информацию о категории по указанному ID.\n *     tags: [Категории]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор категории\n *     responses:\n *       200:\n *         description: Category found.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Category'\n *       404:\n *         description: Category not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.get(\"/:id\", (req, res) => CategoryController_1.CategoryController.getCategoryById(req, res));\n/**\n * @swagger\n * /categories/{id}:\n *   put:\n *     summary: Обновление категории\n *     description: Обновляет информацию о категории по указанному ID.\n *     tags: [Категории]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор категории\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UpdateCategory'\n *     responses:\n *       200:\n *         description: Category updated successfully.\n *       400:\n *         description: Bad request.\n *       404:\n *         description: Category not found.\n */\nrouter.put(\"/:id\", (req, res) => CategoryController_1.CategoryController.updateCategory(req, res));\n/**\n * @swagger\n * /categories/{id}:\n *   delete:\n *     summary: Удаление категории\n *     description: Удаляет категорию по указанному ID.\n *     tags: [Категории]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор категории\n *     responses:\n *       204:\n *         description: Category deleted successfully.\n *       404:\n *         description: Category not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.delete(\"/:id\", (req, res) => CategoryController_1.CategoryController.deleteCategory(req, res));\n/**\n * @swagger\n * /categories/user/{userId}:\n *   get:\n *     summary: Получение категорий пользователя\n *     description: Возвращает список всех категорий, принадлежащих указанному пользователю.\n *     tags: [Категории]\n *     parameters:\n *       - in: path\n *         name: userId\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор пользователя\n *     responses:\n *       200:\n *         description: List of user categories retrieved successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Category'\n *       404:\n *         description: User or categories not found.\n */\nrouter.get(\"/user/:userId\", (req, res) => CategoryController_1.CategoryController.getUserCategories(req, res));\nexports[\"default\"] = router;\n\n\n//# sourceURL=webpack://server/./src/routers/categoryRouters.ts?");

/***/ }),

/***/ "./src/routers/noteRouters.ts":
/*!************************************!*\
  !*** ./src/routers/noteRouters.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst express_1 = __webpack_require__(/*! express */ \"express\");\nconst NoteController_1 = __webpack_require__(/*! ../controllers/NoteController */ \"./src/controllers/NoteController.ts\");\nconst router = (0, express_1.Router)();\n/**\n * @swagger\n * /notes:\n *   post:\n *     summary: Создание новой заметки\n *     description: Создаёт новую заметку для указанного пользователя.\n *     tags: [Заметки]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/CreateNote'\n *     responses:\n *       201:\n *         description: Note created successfully.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Note'\n *       400:\n *         description: Bad request.\n */\nrouter.post(\"/\", (req, res) => NoteController_1.NoteController.createNote(req, res));\n/**\n * @swagger\n * /notes/{id}:\n *   get:\n *     summary: Получение заметки по ID\n *     description: Возвращает информацию о заметке по указанному ID.\n *     tags: [Заметки]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор заметки\n *     responses:\n *       200:\n *         description: Note found.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Note'\n *       404:\n *         description: Note not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.get(\"/:id\", (req, res) => NoteController_1.NoteController.getNoteById(req, res));\n/**\n * @swagger\n * /notes/{id}:\n *   put:\n *     summary: Обновление заметки\n *     description: Обновляет информацию о заметке по указанному ID.\n *     tags: [Заметки]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор заметки\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UpdateNote'\n *     responses:\n *       200:\n *         description: Note updated successfully.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Note'\n *       400:\n *         description: Bad request.\n *       404:\n *         description: Note not found.\n */\nrouter.put(\"/:id\", (req, res) => NoteController_1.NoteController.updateNote(req, res));\n/**\n * @swagger\n * /notes/{id}:\n *   delete:\n *     summary: Удаление заметки\n *     description: Удаляет заметку по указанному ID.\n *     tags: [Заметки]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор заметки\n *     responses:\n *       204:\n *         description: Note deleted successfully.\n *       404:\n *         description: Note not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.delete(\"/:id\", (req, res) => NoteController_1.NoteController.deleteNote(req, res));\n/**\n * @swagger\n * /notes/user/{userId}:\n *   get:\n *     summary: Получение заметок пользователя\n *     description: Возвращает список всех заметок, принадлежащих указанному пользователю.\n *     tags: [Заметки]\n *     parameters:\n *       - in: path\n *         name: userId\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор пользователя\n *     responses:\n *       200:\n *         description: List of user notes retrieved successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Note'\n *       404:\n *         description: User or notes not found.\n */\nrouter.get(\"/user/:userId\", (req, res) => NoteController_1.NoteController.getUserNotes(req, res));\nexports[\"default\"] = router;\n\n\n//# sourceURL=webpack://server/./src/routers/noteRouters.ts?");

/***/ }),

/***/ "./src/routers/transactionRouters.ts":
/*!*******************************************!*\
  !*** ./src/routers/transactionRouters.ts ***!
  \*******************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst express_1 = __webpack_require__(/*! express */ \"express\");\nconst TransactionController_1 = __webpack_require__(/*! ../controllers/TransactionController */ \"./src/controllers/TransactionController.ts\");\nconst router = (0, express_1.Router)();\n/**\n * @swagger\n * /transactions:\n *   post:\n *     summary: Создание новой транзакции\n *     description: Создаёт новую транзакцию с указанными данными.\n *     tags: [Транзакции]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/CreateTransaction'\n *     responses:\n *       201:\n *         description: Transaction created successfully.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Transaction'\n *       400:\n *         description: Bad request.\n */\nrouter.post(\"/\", (req, res) => TransactionController_1.TransactionController.createTransaction(req, res));\n/**\n * @swagger\n * /transactions/{id}:\n *   get:\n *     summary: Получение транзакции по ID\n *     description: Возвращает информацию о транзакции по указанному ID.\n *     tags: [Транзакции]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор транзакции\n *     responses:\n *       200:\n *         description: Transaction found.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Transaction'\n *       404:\n *         description: Transaction not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.get(\"/:id\", (req, res) => TransactionController_1.TransactionController.getTransactionById(req, res));\n/**\n * @swagger\n * /transactions/{id}:\n *   put:\n *     summary: Обновление транзакции\n *     description: Обновляет информацию о транзакции по указанному ID.\n *     tags: [Транзакции]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор транзакции\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UpdateTransaction'\n *     responses:\n *       200:\n *         description: Transaction updated successfully.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Transaction'\n *       400:\n *         description: Bad request.\n *       404:\n *         description: Transaction not found.\n */\nrouter.put(\"/:id\", (req, res) => TransactionController_1.TransactionController.updateTransaction(req, res));\n/**\n * @swagger\n * /transactions/{id}:\n *   delete:\n *     summary: Удаление транзакции\n *     description: Удаляет транзакцию по указанному ID.\n *     tags: [Транзакции]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор транзакции\n *     responses:\n *       204:\n *         description: Transaction deleted successfully.\n *       404:\n *         description: Transaction not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.delete(\"/:id\", (req, res) => TransactionController_1.TransactionController.deleteTransaction(req, res));\n/**\n * @swagger\n * /transactions/account/{accountId}:\n *   get:\n *     summary: Получение транзакций аккаунта\n *     description: Возвращает список всех транзакций, связанных с указанным аккаунтом.\n *     tags: [Транзакции]\n *     parameters:\n *       - in: path\n *         name: accountId\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор аккаунта\n *     responses:\n *       200:\n *         description: List of account transactions retrieved successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Transaction'\n *       404:\n *         description: Account not found or no transactions available.\n */\nrouter.get(\"/account/:accountId\", (req, res) => TransactionController_1.TransactionController.getAccountTransactions(req, res));\n/**\n * @swagger\n * /transactions/category/{categoryId}:\n *   get:\n *     summary: Получение транзакций по категории\n *     description: Возвращает список всех транзакций, связанных с указанной категорией.\n *     tags: [Транзакции]\n *     parameters:\n *       - in: path\n *         name: categoryId\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор категории\n *     responses:\n *       200:\n *         description: List of transactions by category retrieved successfully.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/Transaction'\n *       404:\n *         description: Category not found or no transactions available.\n */\nrouter.get(\"/category/:categoryId\", (req, res) => TransactionController_1.TransactionController.getTransactionsByCategory(req, res));\nexports[\"default\"] = router;\n\n\n//# sourceURL=webpack://server/./src/routers/transactionRouters.ts?");

/***/ }),

/***/ "./src/routers/userRouters.ts":
/*!************************************!*\
  !*** ./src/routers/userRouters.ts ***!
  \************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst express_1 = __webpack_require__(/*! express */ \"express\");\nconst UserController_1 = __webpack_require__(/*! ../controllers/UserController */ \"./src/controllers/UserController.ts\");\nconst middleware_1 = __webpack_require__(/*! ../middleware */ \"./src/middleware/index.ts\");\nconst router = (0, express_1.Router)();\n/**\n * @swagger\n * /users:\n *   get:\n *     summary: Получение всех пользователей\n *     description: Возвращает список всех пользователей.\n *     tags: [Пользователи]\n *     responses:\n *       200:\n *         description: List of all users.\n *         content:\n *           application/json:\n *             schema:\n *               type: array\n *               items:\n *                 $ref: '#/components/schemas/User'\n *       500:\n *         description: Internal server error.\n */\nrouter.get(\"/\", (0, middleware_1.asyncHandler)(UserController_1.UserController.getAllUsers));\n/**\n * @swagger\n * /users:\n *   post:\n *     summary: Создание нового пользователя\n *     description: Создаёт нового пользователя с указанными данными.\n *     tags: [Пользователи]\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/CreateUser'\n *     responses:\n *       201:\n *         description: User created successfully.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       400:\n *         description: Bad request.\n */\nrouter.post(\"/\", (0, middleware_1.asyncHandler)(UserController_1.UserController.createUser));\n/**\n * @swagger\n * /users/{id}:\n *   get:\n *     summary: Получение пользователя по ID\n *     description: Возвращает информацию о пользователе по указанному ID.\n *     tags: [Пользователи]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор пользователя\n *     responses:\n *       200:\n *         description: User found.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       404:\n *         description: User not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.get(\"/:id\", (0, middleware_1.asyncHandler)(UserController_1.UserController.getUserById));\n/**\n * @swagger\n * /users/{id}:\n *   put:\n *     summary: Обновление данных пользователя\n *     description: Обновляет информацию о пользователе по указанному ID.\n *     tags: [Пользователи]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор пользователя\n *     requestBody:\n *       required: true\n *       content:\n *         application/json:\n *           schema:\n *             $ref: '#/components/schemas/UpdateUser'\n *     responses:\n *       200:\n *         description: User updated successfully.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/User'\n *       400:\n *         description: Bad request.\n *       404:\n *         description: User not found.\n */\nrouter.put(\"/:id\", (0, middleware_1.asyncHandler)(UserController_1.UserController.updateUser));\n/**\n * @swagger\n * /users/{id}:\n *   delete:\n *     summary: Удаление пользователя\n *     description: Удаляет пользователя по указанному ID.\n *     tags: [Пользователи]\n *     parameters:\n *       - in: path\n *         name: id\n *         required: true\n *         schema:\n *           type: integer\n *         description: Идентификатор пользователя\n *     responses:\n *       204:\n *         description: User deleted successfully.\n *       404:\n *         description: User not found.\n *       500:\n *         description: Internal server error.\n */\nrouter.delete(\"/:id\", (0, middleware_1.asyncHandler)(UserController_1.UserController.deleteUser));\nexports[\"default\"] = router;\n\n\n//# sourceURL=webpack://server/./src/routers/userRouters.ts?");

/***/ }),

/***/ "./src/server.ts":
/*!***********************!*\
  !*** ./src/server.ts ***!
  \***********************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nconst express_1 = __importDefault(__webpack_require__(/*! express */ \"express\"));\nconst cors_1 = __importDefault(__webpack_require__(/*! cors */ \"cors\"));\nconst dotenv_1 = __importDefault(__webpack_require__(/*! dotenv */ \"dotenv\"));\nconst userRouters_1 = __importDefault(__webpack_require__(/*! ../src/routers/userRouters */ \"./src/routers/userRouters.ts\"));\nconst accountRouters_1 = __importDefault(__webpack_require__(/*! ../src/routers/accountRouters */ \"./src/routers/accountRouters.ts\"));\nconst categoryRouters_1 = __importDefault(__webpack_require__(/*! ../src/routers/categoryRouters */ \"./src/routers/categoryRouters.ts\"));\nconst transactionRouters_1 = __importDefault(__webpack_require__(/*! ../src/routers/transactionRouters */ \"./src/routers/transactionRouters.ts\"));\nconst noteRouters_1 = __importDefault(__webpack_require__(/*! ../src/routers/noteRouters */ \"./src/routers/noteRouters.ts\"));\nconst swagger_1 = __webpack_require__(/*! ../src/config/swagger */ \"./src/config/swagger.ts\");\ndotenv_1.default.config();\nconst app = (0, express_1.default)();\nconst PORT = process.env.PORT || 3222;\nconst DB_HOST = process.env.DB_HOST || \"localhost\";\napp.use((0, cors_1.default)({\n    origin: [`http://localhost:3000`],\n    methods: [\"GET\", \"POST\", \"PUT\", \"DELETE\"],\n    credentials: true,\n}));\napp.use(express_1.default.json());\napp.use(\"/users\", userRouters_1.default);\napp.use(\"/accounts\", accountRouters_1.default);\napp.use(\"/categories\", categoryRouters_1.default);\napp.use(\"/transactions\", transactionRouters_1.default);\napp.use(\"/notes\", noteRouters_1.default);\napp.listen(PORT, () => {\n    console.log(`Server running on port ${PORT}`);\n    (0, swagger_1.swaggerDocs)(app, PORT);\n});\nconsole.log(`Database Host: ${process.env.DB_HOST}`);\nconsole.log(`Server is running on port: ${process.env.PORT}`);\n\n\n//# sourceURL=webpack://server/./src/server.ts?");

/***/ }),

/***/ "./src/services/AccountService.ts":
/*!****************************************!*\
  !*** ./src/services/AccountService.ts ***!
  \****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.AccountService = void 0;\nconst AccountRepository_1 = __webpack_require__(/*! ../repositories/AccountRepository */ \"./src/repositories/AccountRepository.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils/ */ \"./src/utils/index.ts\");\nclass AccountService {\n    static createAccount(account) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { ownerId, accountName, totalBalance, currency } = account;\n            // Простая валидация входных данных\n            if (!ownerId || !accountName || !currency) {\n                throw new utils_1.ValidationError(\"Owner ID, account name, and currency are required.\");\n            }\n            const allowedCurrencies = [\"USD\", \"EUR\", \"RUB\"];\n            if (!allowedCurrencies.includes(currency)) {\n                throw new utils_1.ValidationError(`Currency must be one of the following: ${allowedCurrencies.join(\", \")}`);\n            }\n            return yield AccountRepository_1.AccountRepository.createAccount(account);\n        });\n    }\n    static getAccountById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Account ID is required.\");\n            }\n            const account = yield AccountRepository_1.AccountRepository.getAccountById(id);\n            if (!account) {\n                throw new utils_1.ValidationError(\"Account not found.\");\n            }\n            return account;\n        });\n    }\n    static updateAccount(id, accountName, totalBalance, currency) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Account ID is required.\");\n            }\n            const account = yield AccountRepository_1.AccountRepository.getAccountById(id);\n            if (!account) {\n                throw new utils_1.ValidationError(\"Account not found.\");\n            }\n            if (!accountName || !currency) {\n                throw new utils_1.ValidationError(\"Account name and currency are required.\");\n            }\n            return yield AccountRepository_1.AccountRepository.updateAccount(id, accountName, totalBalance, currency);\n        });\n    }\n    // Удаление аккаунта\n    static deleteAccount(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Account ID is required.\");\n            }\n            const account = yield AccountRepository_1.AccountRepository.getAccountById(id);\n            if (!account) {\n                throw new utils_1.ValidationError(\"Account not found.\");\n            }\n            yield AccountRepository_1.AccountRepository.deleteAccount(id);\n        });\n    }\n    // Получение всех аккаунтов пользователя\n    static getUserAccounts(userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!userId) {\n                throw new utils_1.ValidationError(\"User ID is required.\");\n            }\n            return yield AccountRepository_1.AccountRepository.getUserAccounts(userId);\n        });\n    }\n    // Получение баланса аккаунта\n    static getAccountBalance(accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!accountId) {\n                throw new utils_1.ValidationError(\"Account ID is required.\");\n            }\n            return yield AccountRepository_1.AccountRepository.getAccountBalance(accountId);\n        });\n    }\n}\nexports.AccountService = AccountService;\n\n\n//# sourceURL=webpack://server/./src/services/AccountService.ts?");

/***/ }),

/***/ "./src/services/CategoryService.ts":
/*!*****************************************!*\
  !*** ./src/services/CategoryService.ts ***!
  \*****************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.CategoryService = void 0;\nconst CategoryRepository_1 = __webpack_require__(/*! ../repositories/CategoryRepository */ \"./src/repositories/CategoryRepository.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils/ */ \"./src/utils/index.ts\");\nclass CategoryService {\n    // Создание новой категории\n    static createCategory(category) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { image, categoryName, userId } = category;\n            if (!userId || !categoryName) {\n                throw new utils_1.ValidationError(\"User ID and category name are required.\");\n            }\n            return yield CategoryRepository_1.CategoryRepository.createCategory(category);\n        });\n    }\n    // Получить категорию по ID\n    static getCategoryById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Category ID is required.\");\n            }\n            const category = yield CategoryRepository_1.CategoryRepository.getCategoryById(id);\n            if (!category) {\n                throw new utils_1.ValidationError(\"Category not found.\");\n            }\n            return category;\n        });\n    }\n    // Обновление категории\n    static updateCategory(id, categoryName, image) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id || !categoryName) {\n                throw new utils_1.ValidationError(\"Category ID and name are required.\");\n            }\n            const category = yield CategoryRepository_1.CategoryRepository.getCategoryById(id);\n            if (!category) {\n                throw new utils_1.ValidationError(\"Category not found.\");\n            }\n            return yield CategoryRepository_1.CategoryRepository.updateCategory(id, categoryName, image);\n        });\n    }\n    // Удаление категории\n    static deleteCategory(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Category ID is required.\");\n            }\n            const category = yield CategoryRepository_1.CategoryRepository.getCategoryById(id);\n            if (!category) {\n                throw new utils_1.ValidationError(\"Category not found.\");\n            }\n            yield CategoryRepository_1.CategoryRepository.deleteCategory(id);\n        });\n    }\n    // Получение всех категорий пользователя\n    static getUserCategories(userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!userId) {\n                throw new utils_1.ValidationError(\"User ID is required.\");\n            }\n            return yield CategoryRepository_1.CategoryRepository.getUserCategories(userId);\n        });\n    }\n}\nexports.CategoryService = CategoryService;\n\n\n//# sourceURL=webpack://server/./src/services/CategoryService.ts?");

/***/ }),

/***/ "./src/services/NoteService.ts":
/*!*************************************!*\
  !*** ./src/services/NoteService.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.NoteService = void 0;\nconst NoteRepository_1 = __webpack_require__(/*! ../repositories/NoteRepository */ \"./src/repositories/NoteRepository.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils/ */ \"./src/utils/index.ts\");\nclass NoteService {\n    static createNote(note) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { title, description, reminderDate, userId } = note;\n            if (!title || !description || !userId) {\n                throw new utils_1.ValidationError(\"Title, content, and user ID are required.\");\n            }\n            return yield NoteRepository_1.NoteRepository.createNote(note);\n        });\n    }\n    static getNoteById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Note ID is required.\");\n            }\n            const note = yield NoteRepository_1.NoteRepository.getNoteById(id);\n            if (!note) {\n                throw new utils_1.ValidationError(\"Note not found.\");\n            }\n            return note;\n        });\n    }\n    static updateNote(id, title, description) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id || !title || !description) {\n                throw new utils_1.ValidationError(\"Note ID, title, and content are required.\");\n            }\n            const note = yield NoteRepository_1.NoteRepository.getNoteById(id);\n            if (!note) {\n                throw new utils_1.ValidationError(\"Note not found.\");\n            }\n            return yield NoteRepository_1.NoteRepository.updateNote(id, title, description);\n        });\n    }\n    static deleteNote(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Note ID is required.\");\n            }\n            const note = yield NoteRepository_1.NoteRepository.getNoteById(id);\n            if (!note) {\n                throw new utils_1.ValidationError(\"Note not found.\");\n            }\n            yield NoteRepository_1.NoteRepository.deleteNote(id);\n        });\n    }\n    static getUserNotes(userId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!userId) {\n                throw new utils_1.ValidationError(\"User ID is required.\");\n            }\n            return yield NoteRepository_1.NoteRepository.getUserNotes(userId);\n        });\n    }\n}\nexports.NoteService = NoteService;\n\n\n//# sourceURL=webpack://server/./src/services/NoteService.ts?");

/***/ }),

/***/ "./src/services/TransactionService.ts":
/*!********************************************!*\
  !*** ./src/services/TransactionService.ts ***!
  \********************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.TransactionService = void 0;\nconst TransactionRepository_1 = __webpack_require__(/*! ../repositories/TransactionRepository */ \"./src/repositories/TransactionRepository.ts\");\nconst utils_1 = __webpack_require__(/*! ../utils/ */ \"./src/utils/index.ts\");\nclass TransactionService {\n    // Создать транзакцию\n    static createTransaction(transaction) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { accountId, userId, categoryId, isIncome, amount } = transaction;\n            if (!accountId || !userId || !categoryId || amount === undefined) {\n                throw new utils_1.ValidationError(\"All fields are required: accountId, userId, categoryId, isIncome, amount.\");\n            }\n            return yield TransactionRepository_1.TransactionRepository.createTransaction(transaction);\n        });\n    }\n    // Получить транзакцию по ID\n    static getTransactionById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Transaction ID is required.\");\n            }\n            const transaction = yield TransactionRepository_1.TransactionRepository.getTransactionById(id);\n            if (!transaction) {\n                throw new utils_1.ValidationError(\"Transaction not found.\");\n            }\n            return transaction;\n        });\n    }\n    // Обновить транзакцию\n    static updateTransaction(id, accountId, categoryId, isIncome, amount) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id || !accountId || !categoryId || amount === undefined) {\n                throw new utils_1.ValidationError(\"All fields are required: id, accountId, categoryId, isIncome, amount.\");\n            }\n            const transaction = yield TransactionRepository_1.TransactionRepository.getTransactionById(id);\n            if (!transaction) {\n                throw new utils_1.ValidationError(\"Transaction not found.\");\n            }\n            return yield TransactionRepository_1.TransactionRepository.updateTransaction(id, accountId, categoryId, isIncome, amount);\n        });\n    }\n    // Удалить транзакцию\n    static deleteTransaction(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!id) {\n                throw new utils_1.ValidationError(\"Transaction ID is required.\");\n            }\n            const transaction = yield TransactionRepository_1.TransactionRepository.getTransactionById(id);\n            if (!transaction) {\n                throw new utils_1.ValidationError(\"Transaction not found.\");\n            }\n            yield TransactionRepository_1.TransactionRepository.deleteTransaction(id);\n        });\n    }\n    // Получить транзакции аккаунта\n    static getAccountTransactions(accountId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!accountId) {\n                throw new utils_1.ValidationError(\"Account ID is required.\");\n            }\n            return yield TransactionRepository_1.TransactionRepository.getAccountTransactions(accountId);\n        });\n    }\n    // Получить транзакции по категории\n    static getTransactionsByCategory(categoryId) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (!categoryId) {\n                throw new utils_1.ValidationError(\"Category ID is required.\");\n            }\n            return yield TransactionRepository_1.TransactionRepository.getTransactionsByCategory(categoryId);\n        });\n    }\n}\nexports.TransactionService = TransactionService;\n\n\n//# sourceURL=webpack://server/./src/services/TransactionService.ts?");

/***/ }),

/***/ "./src/services/UserService.ts":
/*!*************************************!*\
  !*** ./src/services/UserService.ts ***!
  \*************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.UserService = void 0;\nconst UserRepository_1 = __webpack_require__(/*! ../repositories/UserRepository */ \"./src/repositories/UserRepository.ts\");\nclass UserService {\n    static getAllUsers() {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield UserRepository_1.UserRepository.getAll();\n        });\n    }\n    static createUser(user) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield UserRepository_1.UserRepository.create(user);\n        });\n    }\n    static getUserById(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield UserRepository_1.UserRepository.getById(id);\n        });\n    }\n    static updateUser(id, user) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield UserRepository_1.UserRepository.update(id, user);\n        });\n    }\n    static deleteUser(id) {\n        return __awaiter(this, void 0, void 0, function* () {\n            return yield UserRepository_1.UserRepository.delete(id);\n        });\n    }\n}\nexports.UserService = UserService;\n\n\n//# sourceURL=webpack://server/./src/services/UserService.ts?");

/***/ }),

/***/ "./src/utils/index.ts":
/*!****************************!*\
  !*** ./src/utils/index.ts ***!
  \****************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidationError = exports.getErrorMessage = void 0;\nconst getErrorMessage = (error) => {\n    if (error instanceof Error) {\n        return error.message;\n    }\n    return \"Unknown error occurred\";\n};\nexports.getErrorMessage = getErrorMessage;\nvar validation_error_1 = __webpack_require__(/*! ./validation-error */ \"./src/utils/validation-error.ts\");\nObject.defineProperty(exports, \"ValidationError\", ({ enumerable: true, get: function () { return validation_error_1.ValidationError; } }));\n\n\n//# sourceURL=webpack://server/./src/utils/index.ts?");

/***/ }),

/***/ "./src/utils/validation-error.ts":
/*!***************************************!*\
  !*** ./src/utils/validation-error.ts ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({ value: true }));\nexports.ValidationError = void 0;\nclass ValidationError extends Error {\n    constructor(message) {\n        super(message);\n        this.name = \"ValidationError\";\n    }\n}\nexports.ValidationError = ValidationError;\n\n\n//# sourceURL=webpack://server/./src/utils/validation-error.ts?");

/***/ }),

/***/ "cors":
/*!***********************!*\
  !*** external "cors" ***!
  \***********************/
/***/ ((module) => {

module.exports = require("cors");

/***/ }),

/***/ "dotenv":
/*!*************************!*\
  !*** external "dotenv" ***!
  \*************************/
/***/ ((module) => {

module.exports = require("dotenv");

/***/ }),

/***/ "express":
/*!**************************!*\
  !*** external "express" ***!
  \**************************/
/***/ ((module) => {

module.exports = require("express");

/***/ }),

/***/ "pg":
/*!*********************!*\
  !*** external "pg" ***!
  \*********************/
/***/ ((module) => {

module.exports = require("pg");

/***/ }),

/***/ "swagger-jsdoc":
/*!********************************!*\
  !*** external "swagger-jsdoc" ***!
  \********************************/
/***/ ((module) => {

module.exports = require("swagger-jsdoc");

/***/ }),

/***/ "swagger-ui-express":
/*!*************************************!*\
  !*** external "swagger-ui-express" ***!
  \*************************************/
/***/ ((module) => {

module.exports = require("swagger-ui-express");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module is referenced by other modules so it can't be inlined
/******/ 	var __webpack_exports__ = __webpack_require__("./src/server.ts");
/******/ 	
/******/ })()
;